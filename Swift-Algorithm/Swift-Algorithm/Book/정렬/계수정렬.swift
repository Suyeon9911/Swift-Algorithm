//
//  계수정렬.swift
//  Swift-Algorithm
//
//  Created by 김수연 on 2022/10/06.
//

import Foundation

/*

 4. 계수 정렬 : 특정한 조건이 부합할때만 사용할 수 있지만 매우 빠른 정렬 알고리즘
 모든 데이터가 양의 정수인 상황
 데이터의 개수가 n 데이터 중 최댓값이 k일때 -> 최악에도 O(N+K)를 보장
 데이터의 크기 범위가 제한되어 정수형태로 표현할 수 있을 때만 사용할 수 있음.

 예를 들어 0 이상 100 이하인 성적 데이터를 정렬할 때 효과적
 다만, 가장 큰 데이터와 작은 데이터의 차이가 너무 크다면 사용할 수 업삳.
 계수 정렬을 이용할 때는 모든 범위를 담을 수 있는 크기의 배열을 선언해야하기 때문.
 비교 기반 정렬 알고리즘이 아니라
 별도의 리스트르 선언하고 그 안에 정렬에 대한 정보를 담는다는 특징이 있다.

 초기 단계 : 7 5 9 0 3 1 6 2 9 1 4 8 0 5 2
 데이터의 범위가 0부터 9 -> 크기가 10인 리스트선언
 처음에는 모두 0으로 초기화
 그다음 데이터를 하나씩 확인하여 데이터의 값과 동일한 인덱스의 데이터를 1씩 증가시키자
 */

func 계수정렬() {

    // 모든 원소의 값이 0보다 크거나 같다고 가정

    var array = [7, 5, 9, 0, 3, 1, 6, 2, 9, 1, 4, 8, 0, 5, 2]

    // 모든 범위를 포함하는 리스트 선언 - 모든 값은 0으로 초기화

    var count = Array(repeating: 0, count: array.max()! + 1)

    for i in 0..<array.count {
        count[array[i]] += 1 // 각 데이터에 해당하는 인덱스 값 1 증가
    }

    for i in 0..<count.count {
        // 리스트에 기록된 정렬 정보 확인
        for _ in 0..<count[i] {
            print(i, terminator: " ")
        }
    }

}

/*
 시간 복잡도 ? O(n+k)
 앞에서부터 데이터를 하나씩 확인하면서 리스트에서 적절한 값을 1씩 증가시킴
 리스트의 각 인덱스에 해당하는 값들을 확인할 때 데이터 중 최댓값의 크기만큼 반복 수행
 데이터의 범위만 한정되어 있다면 효과적으로 사용할 수 있다. 항상 빠르게 동작한다.
 혀ㅑㄴ존하는 정렬 알고리즘 중에서 기수 정렬과 더불어 가장 빠르다.

 기수 정렬은 계수 정렬에 비해 동작은 느리지만, 처리할수 잇는 정수의 크기는 더 크다.

 때에 따라 비효율성 초래 : 데이터가 0과 999999 단 2개만 존재한다고 가정했을때도
 리스트의 크기가 100만개가 되도록 선ㅌ언해야함

 동일한 값을 가지는 데이터가 여러개 존재할 때 적합하다. 
 */
